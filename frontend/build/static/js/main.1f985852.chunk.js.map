{"version":3,"sources":["app/create_monitoring/CreateMonitoring.tsx","app/monitoring_list/MonitoringList.tsx","app/App.tsx","app/Constants.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","name","url","CreateMonitoring","props","handleInputChangeUrl","event","value","target","setState","handleInputChangeName","handleSubmit","a","preventDefault","create","state","error","alert","className","onSubmit","this","type","onChange","React","Component","ServiceList","listItems","Object","entries","services","map","service","creationTime","status","App","_onSocketEvent","msg","body","jsonBody","JSON","parse","oldState","newServiceValue","reference","newState","componentDidMount","loadServices","client","Client","brokerURL","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","console","log","subscribe","onDisconnect","activate","axios","get","then","res","list","data","item","catch","err","createMonitoring","_createMonitoring","response","post","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f985852.chunk.js","sourcesContent":["import React from \"react\";\nimport { CreateMonitoringList } from \"../Types\";\nimport \"./CreateMonitoring.css\";\n\ninterface CreateState {\n  name: string;\n  url: string;\n}\n\nconst initialState = {\n  name: \"\",\n  url: \"\",\n};\n\nexport class CreateMonitoring extends React.Component<\n  CreateMonitoringList,\n  CreateState\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = initialState;\n  }\n\n  render() {\n    return (\n      <form className=\"monitoring-form\" onSubmit={this.handleSubmit}>\n        <div className=\"form-row\">\n          <label>Service Name:</label>\n          <input\n            name=\"serviceName\"\n            type=\"text\"\n            value={this.state.name}\n            onChange={this.handleInputChangeName}\n          />\n        </div>\n        <div className=\"form-row\">\n          <label>Url:</label>\n          <input\n            name=\"urlToPoll\"\n            type=\"text\"\n            value={this.state.url}\n            onChange={this.handleInputChangeUrl}\n          />\n        </div>\n        <input type=\"submit\" value=\"Add monitoring\" />\n      </form>\n    );\n  }\n\n  handleInputChangeUrl = (event: any) => {\n    const target = event.target;\n    const value = target.value;\n    this.setState({\n      url: value,\n    });\n  };\n\n  handleInputChangeName = (event: any) => {\n    const target = event.target;\n    const value = target.value;\n    this.setState({\n      name: value,\n    });\n  };\n\n  handleSubmit = async (event: any) => {\n    event.preventDefault();\n\n    const error: string | null = await this.props.create(\n      this.state.name,\n      this.state.url\n    );\n    if (error !== null) {\n      alert(\"Received error: \" + error);\n    } else {\n      this.setState(initialState);\n    }\n  };\n}\n","import { MonitoringDict as ServiceDict } from \"../Types\";\nimport \"./MonitoringList.css\";\n\nexport const ServiceList = (props: ServiceDict) => {\n  const listItems = Object.entries(props.services).map(([_, service]) => (\n    <li key={service.url}>\n      <div className=\"service-text-info-wrapper\">\n        <label>Name: {service.name}</label>\n        <label>Url: {service.url}</label>\n        <label>Created: {service.creationTime}</label>\n      </div>\n      <div className=\"service-status-wrapper tooltip\">\n        <span className={\"dot \" + service.status}></span>\n        <span className=\"tooltiptext\">{service.status}</span>\n      </div>\n    </li>\n  ));\n  return (\n    <div>\n      <ul className=\"monitoring-list\">{listItems}</ul>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { Client } from \"@stomp/stompjs\";\nimport axios from \"axios\";\nimport { SOCKET_URL, LIST_URL, CREATE_URL } from \"./Constants\";\nimport {\n  MonitoringDict,\n  Service,\n  CreateMonitoringList,\n  CreateMonitoringResponse,\n} from \"./Types\";\nimport { CreateMonitoring } from \"./create_monitoring/CreateMonitoring\";\nimport { ServiceList } from \"./monitoring_list/MonitoringList\";\n\nexport class App extends React.Component<{}, MonitoringDict> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      services: {},\n    };\n  }\n\n  _onSocketEvent = (msg) => {\n    if (msg.body) {\n      var jsonBody = JSON.parse(msg.body);\n      const oldState = this.state.services;\n      const newServiceValue: Service = {\n        reference: jsonBody.reference,\n        name: jsonBody.name,\n        url: jsonBody.url,\n        status: jsonBody.status,\n        creationTime: jsonBody.creationTime,\n      };\n      const newState = {\n        ...oldState,\n        [newServiceValue.reference]: newServiceValue,\n      };\n\n      this.setState({\n        services: newState,\n      });\n    }\n  };\n\n  componentDidMount = () => {\n    this.loadServices();\n\n    let onConnected = () => {\n      console.log(\"Socket connection established!\");\n      client.subscribe(\"/topic/monitoring\", this._onSocketEvent);\n    };\n\n    let onDisconnected = () => {\n      console.log(\"Disconnected socket!\");\n    };\n\n    const client = new Client({\n      brokerURL: SOCKET_URL,\n      reconnectDelay: 5000,\n      heartbeatIncoming: 4000,\n      heartbeatOutgoing: 4000,\n      onConnect: onConnected,\n      onDisconnect: onDisconnected,\n    });\n\n    client.activate();\n  };\n\n  loadServices = () => {\n    axios\n      .get(LIST_URL)\n      .then((res) => {\n        const list: any[] = res.data;\n        let services = {};\n        for (const item of list) {\n          services[item.reference] = {\n            reference: item.reference,\n            name: item.name,\n            url: item.url,\n            status: item.status,\n            creationTime: item.creationTime,\n          };\n        }\n        this.setState({\n          services,\n        });\n        console.log(\"Initial load of services complete\");\n        console.log(services);\n      })\n      .catch((err) => {\n        console.error(\"Failed loading services on initilization\");\n      });\n  };\n\n  createMonitoring: CreateMonitoringList[\"create\"] = async (\n    name: string,\n    url: string\n  ) => {\n    // TODO: Split validation/parsing and action.\n    const response = await this._createMonitoring(name, url);\n    const error = response.error;\n\n    if (typeof error === \"undefined\") {\n      if (typeof response.service === \"undefined\") {\n        return \"Internal error\";\n      }\n      const oldState = this.state.services;\n      const newState = {\n        ...oldState,\n        [response.service.reference]: response.service,\n      };\n      this.setState(() => ({\n        services: newState,\n      }));\n\n      return null;\n    } else {\n      return error;\n    }\n  };\n\n  _createMonitoring = async (\n    name: string,\n    url: string\n  ): Promise<CreateMonitoringResponse> => {\n    const data = {\n      name: name,\n      url: url,\n    };\n\n    return await axios\n      .post(CREATE_URL, data)\n      .then((res) => {\n        // TODO: Can't seem to find a javascript class with HTTP status code mapping instead of just doing something like this.\n        if (res.status === 201) {\n          // TODO: This should be deserilization using JSON.\n          const service: Service = {\n            reference: res.data.reference,\n            name: res.data.name,\n            url: res.data.url,\n            status: res.data.status,\n            creationTime: res.data.creationTime,\n          };\n          console.log(res.data);\n          return {\n            service,\n          };\n        } else {\n          return {\n            error: res.data,\n          };\n        }\n      })\n      .catch((err) => {\n        return {\n          error: err,\n        };\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Form-Wrapper\">\n          <CreateMonitoring create={this.createMonitoring} />\n          <ServiceList services={this.state.services} />\n        </div>\n      </div>\n    );\n  }\n}\n","export const SOCKET_URL = \"ws://localhost:8080/ws-monitoring\";\nexport const CREATE_URL = \"http://localhost:8080/create\";\nexport const LIST_URL = \"http://localhost:8080/list\";\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./app/App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}